/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import type { BaseHttpRequest } from '../core/BaseHttpRequest';
export class DefaultService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}
    /**
     * Create a chat completion
     * @param requestBody
     * @param xCreaoApiName API name identifier
     * @param xCreaoApiPath API path identifier
     * @param xCreaoApiId API ID identifier
     * @returns any Successful completion
     * @throws ApiError
     */
    public createChatCompletion(
        requestBody: {
            /**
             * Model name
             */
            model: string;
            /**
             * Conversation history
             */
            messages: Array<{
                role: 'system' | 'user' | 'assistant';
                content: string;
            }>;
        },
        xCreaoApiName: string = 'OpenAIGPTChat',
        xCreaoApiPath: string = '/v1/ai/zWwyutGgvEGWwzSa/chat/completions',
        xCreaoApiId: string = '688a0b64dc79a2533460892c',
    ): CancelablePromise<{
        /**
         * A unique identifier for the chat completion
         */
        id: string;
        /**
         * The object type, which is always 'chat.completion'
         */
        object: 'chat.completion';
        /**
         * The Unix timestamp (in seconds) of when the chat completion was created
         */
        created: number;
        /**
         * The model used for the chat completion
         */
        model: string;
        /**
         * This fingerprint represents the backend configuration that the model runs with
         */
        system_fingerprint?: string | null;
        /**
         * A list of chat completion choices. Can be more than one if n is greater than 1
         */
        choices: Array<{
            /**
             * The index of the choice in the list of choices
             */
            index: number;
            /**
             * Log probability information for the choice
             */
            logprobs?: Record<string, any> | null;
            message: {
                /**
                 * The role of the author of this message
                 */
                role: 'assistant';
                /**
                 * The contents of the message
                 */
                content: string;
                /**
                 * The reasoning content of the message, if any
                 */
                reasoning_content?: string | null;
                /**
                 * The function call generated by the model, if any
                 */
                function_call?: Record<string, any> | null;
                /**
                 * The tool calls generated by the model, if any
                 */
                tool_calls?: Array<Record<string, any>> | null;
                /**
                 * Additional reasoning details, if any
                 */
                reasoning_details?: Record<string, any> | null;
            };
            /**
             * The reason the model stopped generating tokens
             */
            finish_reason: 'stop' | 'length' | 'function_call' | 'content_filter' | 'null';
            /**
             * The native finish reason from the underlying model
             */
            native_finish_reason?: string | null;
        }>;
        /**
         * Usage statistics for the completion request
         */
        usage: {
            /**
             * Number of tokens in the prompt
             */
            prompt_tokens: number;
            /**
             * Number of tokens in the generated completion
             */
            completion_tokens: number;
            /**
             * Total number of tokens used in the request (prompt + completion)
             */
            total_tokens: number;
            /**
             * Breakdown of completion tokens usage
             */
            completion_tokens_details?: {
                /**
                 * Number of tokens used for reasoning
                 */
                reasoning_tokens: number;
            };
            /**
             * Breakdown of prompt tokens usage
             */
            prompt_tokens_details?: Record<string, any> | null;
        };
    }> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/v1/ai/zWwyutGgvEGWwzSa/chat/completions',
            headers: {
                'X-CREAO-API-NAME': xCreaoApiName,
                'X-CREAO-API-PATH': xCreaoApiPath,
                'X-CREAO-API-ID': xCreaoApiId,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                401: `Invalid or missing API key`,
            },
        });
    }
}
